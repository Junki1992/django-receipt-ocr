{% extends "base.html" %}
{% load static %}
{% load humanize %}

{% block title %}領収書アップロード{% endblock %}

{% block content %}
<div class="upload-container">
  <h1>領収書をアップロード</h1>
  <p class="subtitle">レシートの写真をまとめてアップロードできます</p>

  {% if error %}
  <div class="alert alert-danger">{{ error }}</div>
  {% endif %}

  <div class="info-cards">
    <div class="info-card">
      <i class="fas fa-file-alt"></i>
      <p>対応形式<br>JPG, PNG, WEBP, HEIC, HEIF, ZIP</p>
    </div>
    <div class="info-card">
      <i class="fas fa-weight-hanging"></i>
      <p>最大サイズ<br>16MB</p>
    </div>
    <div class="info-card">
      <i class="fas fa-file-archive"></i>
      <p>推奨<br>ZIPで最大100枚</p>
    </div>
  </div>

  <!-- iOS専用の案内を追加 -->
  <div id="ios-notice" style="display: none; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 1em; margin-bottom: 1em; text-align: center;">
    <p style="margin: 0; color: #856404;">
      <i class="fas fa-info-circle"></i>
      <strong>iPhone/iPadをご利用の方へ</strong><br>
      カメラで撮影する場合は「設定 → カメラ → フォーマット → 互換性優先（JPEG）」をお勧めします
    </p>
  </div>

  <form id="upload-form" method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <div id="drop-zone" class="drop-zone">
      <div class="drop-zone-prompt">
        <i class="fas fa-cloud-upload-alt"></i>
        <p class="drop-guide-pc">ここにファイルをドラッグ＆ドロップ<br>または</p>
        <p class="drop-guide-mobile">写真を選択 または撮影してください</p>
      </div>
      <label for="file-input" class="browse-btn">ファイルを選択</label>
      <input type="file" id="file-input" name="receipt" multiple required style="display: none;">
      <div id="file-preview" class="file-preview"></div>
    </div>
    <div style="text-align: center;">
      <button type="submit" id="submit-button">アップロード</button>
      <button type="reset" id="reset-button">リセット</button>
    </div>
  </form>

  <!-- プログレスバー用のdivも追加 -->
  <div id="upload-status" class="upload-status">
    <div class="spinner"></div>
    <p>アップロード中...</p>
  </div>

  <div id="results-container" class="results-container"></div>

  <!-- エラー表示用のdivを用意 -->
  <div id="error-message" class="alert alert-danger" style="display:none;"></div>
</div>
{% endblock %}

{% block extra_css %}
<style>
  .upload-container {
    width: calc(100% - 20px);
    max-width: 600px;
    margin: 0 auto;
    padding: 1em;
    box-sizing: border-box;
  }
  .upload-container h1 {
    text-align: center;
    font-size: 1.8em;
    color: #2c3e50;
    margin-bottom: 0.2em;
  }
  .subtitle {
    text-align: center;
    color: #6c757d;
    margin-bottom: 2em;
  }
  .info-cards {
    display: flex;
    justify-content: space-around;
    gap: 1em;
    margin-bottom: 2em;
  }
  .info-card {
    background: #f8f9fa;
    border-radius: 0.8em;
    padding: 1em;
    text-align: center;
    flex: 1;
    font-size: 0.9em;
    color: #495057;
  }
  .info-card i {
    font-size: 1.8em;
    color: #38b2ac;
    margin-bottom: 0.5em;
  }
  .info-card p {
    margin: 0;
    line-height: 1.4;
  }
  .drop-zone {
    border: 2px dashed #ced4da;
    border-radius: 1em;
    padding: 2em;
    text-align: center;
    cursor: pointer;
    background: #fff;
    transition: background-color 0.2s, border-color 0.2s;
    position: relative;
    margin-bottom: 1.5em;
  }
  .drop-zone.dragover {
    background-color: #e6fffa;
    border-color: #38b2ac;
  }
  .drop-zone input[type="file"] {
    display: none;
  }
  .drop-zone-prompt i {
    font-size: 3em;
    color: #adb5bd;
    margin-bottom: 0.5em;
    transition: color 0.2s;
  }
  .drop-zone:hover .drop-zone-prompt i {
    color: #38b2ac;
  }
  .drop-zone-prompt p {
    margin: 0 0 0.5em 0;
    font-size: 1.1em;
    font-weight: bold;
    color: #495057;
  }
  .or-text {
    color: #6c757d;
    margin-bottom: 0.8em;
    display: block;
  }
  .browse-btn {
    background: #fff;
    color: #38b2ac;
    border: 1px solid #38b2ac;
    border-radius: 0.5em;
    padding: 1em 2em;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
    margin-top: 1.2em;
    display: inline-block;
    min-height: 20px;
    min-width: 44px;
  }
  .browse-btn:hover {
    background: #38b2ac;
    color: #fff;
  }
  .file-preview {
    margin-bottom: 1.5em;
    font-size: 0.9em;
  }
  .preview-item {
    background: #f8f9fa;
    border-radius: 0.5em;
    padding: 0.5em 1em;
    display: flex;
    align-items: center;
    gap: 0.8em;
  }
  .preview-item i {
    color: #6c757d;
  }
  .actions {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.8em;
    margin-bottom: 2em;
  }
  .btn {
    width: 100%;
    padding: 0.9em;
    font-size: 1.1em;
    font-weight: bold;
    border-radius: 0.7em;
    border: none;
    cursor: pointer;
    transition: opacity 0.2s, transform 0.1s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5em;
    box-sizing: border-box;
  }
  .btn:hover {
    opacity: 0.9;
    transform: translateY(-2px);
  }
  .btn-primary {
    background: linear-gradient(90deg, #38b2ac 0%, #4fd1c5 100%);
    color: #fff;
  }
  .btn-secondary {
    background: #e2e8f0;
    color: #38b2ac;
    border: 1px solid #cbd5e0;
  }
  .upload-status {
    display: none;
    text-align: center;
    margin: 2em 0;
  }
  .upload-status.active {
    display: block;
  }
  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #38b2ac;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1em auto;
  }
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  .results-container { margin-top: 2em; }
  .result-item {
    border-radius: 0.8em;
    padding: 1em;
    margin-bottom: 1em;
    border: 1px solid;
  }
  .result-header { display: flex; align-items: center; gap: 0.8em; margin-bottom: 0.5em; }
  .result-header .status { font-weight: bold; margin-left: auto; }
  .status-ok { background: #e6fffa; border-color: #38b2ac; }
  .status-ok .result-header i, .status-ok .result-header .status { color: #2f855a; }
  .status-error { background: #fff5f5; border-color: #fc8181; }
  .status-error .result-header i, .status-error .result-header .status { color: #c53030; }
  
  @media (max-width: 599px) {
    #csv-download-btn {
      display: none;
    }

    .upload-container {
      margin: 0 10px;
    }
  }

  @media (min-width: 600px) {
    .actions {
      grid-template-columns: 2fr 1fr 1fr;
    }
  }

  .drop-guide-pc {
    display: block;
  }
  .drop-guide-mobile {
    display: none;
  }
  @media (max-width: 600px) {
    .drop-guide-pc {
      display: none;
    }
    .drop-guide-mobile {
      display: block;
    }
    .or-text {
      display: none;
    }
  }

  .result-table {
    width: 100%;
    max-width: 700px;
    border-collapse: collapse;
    margin: 0 auto;
    background: #fff;
    font-size: 1rem;
    box-shadow: 0 2px 8px rgba(56,178,172,0.08);
  }
  .result-table th, .result-table td {
    border: 1px solid #b2f5ea;
    padding: 10px 12px;
    text-align: left;
  }
  .result-table th {
    background: #38b2ac;
    color: #fff;
    font-weight: bold;
    font-size: 1.05em;
    border-bottom: 2px solid #2c3e50;
  }
  .result-table tr:nth-child(even) {
    background: #f9f9f9;
  }
</style>
{% endblock %}

{% block extra_js %}
<script>
// iOS検出
function isIOS() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
}

// ページ読み込み時にiOS案内を表示
document.addEventListener('DOMContentLoaded', function() {
    if (isIOS()) {
        document.getElementById('ios-notice').style.display = 'block';
    }
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-input');
    const filePreview = document.getElementById('file-preview');
    const uploadForm = document.getElementById('upload-form');
    const submitButton = document.getElementById('submit-button');
    const resetButton = document.getElementById('reset-button');
    const uploadStatus = document.getElementById('upload-status');

    // 進捗バーの要素を追加
    const progressContainer = document.createElement('div');
    progressContainer.id = 'progress-container';
    progressContainer.style.cssText = `
      display: none;
      margin: 2em 0;
      text-align: center;
    `;
    progressContainer.innerHTML = `
      <div class="progress-bar-container" style="
        width: 100%;
        background-color: #e2e8f0;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 1em;
      ">
        <div id="progress-bar" style="
          width: 0%;
          height: 20px;
          background: linear-gradient(90deg, #38b2ac 0%, #4fd1c5 100%);
          transition: width 0.3s ease;
          border-radius: 10px;
        "></div>
      </div>
      <div id="progress-text" style="
        font-size: 0.9em;
        color: #6c757d;
        margin-bottom: 1em;
      ">0%</div>
      <div id="progress-details" style="
        font-size: 0.8em;
        color: #adb5bd;
      "></div>
    `;
    
    // 進捗バーをupload-statusの後に挿入
    uploadStatus.parentNode.insertBefore(progressContainer, uploadStatus.nextSibling);

    // Drag and Drop
    dropZone.addEventListener('dragover', e => {
      e.preventDefault();
      dropZone.classList.add('dragover');
    });
    dropZone.addEventListener('dragleave', e => {
      e.preventDefault();
      dropZone.classList.remove('dragover');
    });
    dropZone.addEventListener('drop', e => {
      e.preventDefault();
      dropZone.classList.remove('dragover');
      fileInput.files = e.dataTransfer.files;
      handleFiles(fileInput.files);
    });
    dropZone.addEventListener('click', (e) => {
      if (e.target !== dropZone) return;
      fileInput.click();
    });
    fileInput.addEventListener('change', () => {
        alert('ファイル選択イベント発火');
        
        if (fileInput.files && fileInput.files.length > 0) {
            alert('ファイル選択成功: ' + fileInput.files[0].name);
            handleFiles(fileInput.files);
        } else {
            alert('ファイルが選択されていません');
        }
    });
    
    // Handle file selection
    function handleFiles(files) {
        alert('handleFiles関数開始');
        
        filePreview.innerHTML = '';
        if (files && files.length > 0) {
            const file = files[0];
            alert('処理するファイル: ' + file.name + ' (タイプ: ' + file.type + ')');
            
            // ファイルプレビューを表示
            const reader = new FileReader();
            reader.onload = function(e) {
                filePreview.innerHTML = `
                    <div class="file-info">
                        <img src="${e.target.result}" alt="Preview" style="max-width: 200px; max-height: 200px;">
                        <p>${file.name}</p>
                    </div>
                `;
                alert('ファイルプレビュー表示完了');
            };
            reader.readAsDataURL(file);
            
            // フォームのバリデーション状態を更新
            document.getElementById('upload-form').dataset.hasFile = 'true';
            alert('フォームバリデーション更新完了');
        } else {
            alert('ファイルが選択されていません（handleFiles内）');
        }
    }

    // 進捗監視関数（修正版）
    function updateProgress(jobId, retryCount = 0) {
        if (!jobId || retryCount > 30) { // 最大30回で停止
            console.log('Progress monitoring stopped');
            return;
        }
        
        fetch(`/progress/?job_id=${jobId}`)
            .then(response => response.json())
            .then(data => {
                const progressBar = document.getElementById('progress-bar');
                const progressText = document.getElementById('progress-text');
                const progressDetails = document.getElementById('progress-details');
                
                if (data.total > 0) {
                    const percentage = Math.round((data.done / data.total) * 100);
                    progressBar.style.width = percentage + '%';
                    progressText.textContent = `${percentage}% (${data.done}/${data.total})`;
                    progressDetails.textContent = '画像を処理中...';
                    
                    if (data.done >= data.total && data.total > 0) {
                        progressDetails.textContent = '完了しました！';
                        setTimeout(() => {
                            progressContainer.style.display = 'none';
                            uploadStatus.classList.remove('active');
                            submitButton.disabled = false;
                            showResults(jobId);
                            localStorage.removeItem('latest_job_id');
                        }, 1000);
                    } else {
                        setTimeout(() => updateProgress(jobId, retryCount + 1), 1000);
                    }
                } else {
                    progressDetails.textContent = '処理を開始しています...';
                    setTimeout(() => updateProgress(jobId, retryCount + 1), 1000);
                }
            })
            .catch(error => {
                console.error('Progress check error:', error);
                if (retryCount < 10) { // エラー時は最大10回まで
                    setTimeout(() => updateProgress(jobId, retryCount + 1), 2000);
                } else {
                    // エラーが続く場合は停止
                    progressDetails.textContent = '進捗確認に失敗しました';
                    setTimeout(() => {
                        progressContainer.style.display = 'none';
                        uploadStatus.classList.remove('active');
                        submitButton.disabled = false;
                    }, 3000);
                }
            });
    }

    // 結果を表示する関数（修正版）
    function showResults(jobId, retryCount = 0) {
        if (!jobId || retryCount > 10) { // 最大10回で停止
            console.log('Result check stopped');
            return;
        }
        
        const url = `/get-results/?job_id=${jobId}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                const resultsContainer = document.getElementById('results-container');
                if (!data.results || data.results.length === 0) {
                    if (retryCount < 5) {
                        setTimeout(() => showResults(jobId, retryCount + 1), 2000);
                    } else {
                        resultsContainer.innerHTML = '<h3>処理結果</h3><p>結果が取得できませんでした。</p>';
                    }
                    return;
                }
                
                let html = '<h3>処理結果</h3><table class="result-table"><tr><th>ファイル名</th><th>ステータス</th><th>メッセージ</th></tr>';
                data.results.forEach(item => {
                    html += `<tr>
                        <td>${item.filename}</td>
                        <td>${item.status === "OK" ? "成功" : "失敗"}</td>
                        <td>${item.message}</td>
                    </tr>`;
                });
                html += '</table>';
                resultsContainer.innerHTML = html;
            })
            .catch(err => {
                console.error('Result check error:', err);
                if (retryCount < 5) {
                    setTimeout(() => showResults(jobId, retryCount + 1), 2000);
                } else {
                    const resultsContainer = document.getElementById('results-container');
                    resultsContainer.innerHTML = '<h3>処理結果</h3><p>結果の取得に失敗しました。</p>';
                }
            });
    }

    // 「アップロード」ボタンは純粋にsubmitのみ
    uploadForm.addEventListener('submit', function(e) {
      e.preventDefault();
      if (!fileInput.files || fileInput.files.length === 0) {
        alert('ファイルを選択してください');
        return false;
      }

      // プログレスバー表示
      submitButton.disabled = true;
      uploadStatus.classList.add('active');
      progressContainer.style.display = 'block';

      // FormDataでファイルを送信
      const formData = new FormData(uploadForm);
      const jobId = 'job_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      formData.append('job_id', jobId);
      localStorage.setItem('latest_job_id', jobId);

      const csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;

      fetch(uploadForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRFToken': csrftoken,
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success && data.job_id) {
          updateProgress(data.job_id);
        } else if (data.success) {
          document.getElementById('progress-bar').style.width = '100%';
          document.getElementById('progress-text').textContent = '100%';
          document.getElementById('progress-details').textContent = '完了しました！';
          setTimeout(() => {
            progressContainer.style.display = 'none';
            uploadStatus.classList.remove('active');
            submitButton.disabled = false;
            location.reload();
          }, 2000);
        } else {
          throw new Error(data.error || 'アップロードに失敗しました');
        }
      })
      .catch(error => {
        alert('アップロードエラー: ' + error.message);
        progressContainer.style.display = 'none';
        uploadStatus.classList.remove('active');
        submitButton.disabled = false;
      });
    });

    // ★ ページロード時にlocalStorageからjob_idを取得して結果を表示
    const jobId = localStorage.getItem('latest_job_id');
    if (jobId) {
      // 進捗が終わっていれば結果だけ表示、進捗中ならupdateProgressを呼ぶ
      fetch(`/progress/?job_id=${jobId}`)
        .then(response => response.json())
        .then(data => {
          if (data.total > 0 && data.done >= data.total) {
            showResults(jobId);
            // 結果を表示したらjob_idを消す
            localStorage.removeItem('latest_job_id');
          } else if (data.total > 0 && data.done < data.total) {
            updateProgress(jobId);
          }
        });
    }

    // Reset
    resetButton.addEventListener('click', function() {
      filePreview.innerHTML = '';
      progressContainer.style.display = 'none';
      uploadStatus.classList.remove('active');
      submitButton.disabled = false;
      const resultsContainer = document.getElementById('results-container');
      if (resultsContainer) {
          resultsContainer.innerHTML = '';
      }
    });

    console.log(fileInput); // nullでないことを確認
});
</script>
{% endblock %}